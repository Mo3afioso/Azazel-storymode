--[[
	Jabbers
	15FEB2022
	Jabbers Ironman Roguelite - Stashes Module
--]]

local config = {
    -- Enables or Disables the restoration of player stashes for new games
    is_stash_restore_enabled = true,
    -- Enables or Disables showing the stashes on the PDA for new games
    show_stashes_on_pda = true,
    -- Percentage loss of condition for each item in a player stash
    stash_item_condition_loss_percent = 0.01,
}

local m_data = {
    stashes_version = 1,
    stashes = {},
    item_uses_data = {},
}

--------------------------------
-- Private stuff and things
--------------------------------

local function degrade(name, condition)
    if not condition then
        return condition
    end
    local degrade_amount = condition * config.stash_item_condition_loss_percent
    local new_condition = condition - degrade_amount
    roguelite_manager.debug_write("Degrading "..name.." from "..condition.." to "..new_condition)
    return new_condition
end

local function tablelength(T)
    local count = 0
    for _ in pairs(T) do count = count + 1 end
    return count
end

local function restore_prior_state_stashes_v1(data)
    for _, stash_data in pairs(data.stashes) do
        if stash_data then
            local pos = vector():set(stash_data.position.x, stash_data.position.y, stash_data.position.z)
            local se_obj = alife_create("inv_backpack", pos, stash_data.level_vertex_id, stash_data.game_vertex_id)

            if se_obj then
                if config.show_stashes_on_pda then
                    level.map_add_object_spot_ser(se_obj.id, "treasure_player", stash_data.txt)
                end

                stash_data.id = se_obj.id
                m_data.stashes[stash_data.id] = stash_data

                for _, item_data in pairs(stash_data.items) do
                    local class = ini_sys:r_string_ex(item_data.section,"class") or nil
                    if class then 
                        roguelite_manager.debug_write("Condition check for item clsid:"..item_data.clsid.." class:"..class.." section:"..item_data.section)
                        if (IsWeapon(nil, item_data.clsid) and (item_data.section ~= "wpn_binoc_inv")) or
                            IsOutfit(nil, item_data.clsid) or
                            IsHeadgear(nil, item_data.clsid) or
                            IsItem("device", item_data.section) then
                            item_data.condition = degrade(item_data.section, item_data.condition)
                        end
                    end
                end

                roguelite_manager.debug_write("Restored player stash "..stash_data.id.." ".. stash_data.txt .. " with "..tablelength(stash_data.items).." items.")
            end
        end
    end
end

local function try_spawn_stash(box)
    roguelite_manager.debug_write("Trying to populate player stash")

    local stash = m_data.stashes[box:id()]

    if not stash then
        roguelite_manager.debug_write("No stash data found for " .. box:id() .. ".")
        return
    end

    roguelite_manager.debug_write("Populating stash")

    local se_box = alife_object(box:id())
    local item_processor = itms_manager.get_item_processor()

    item_processor.Debug = true

    for _, item_data in pairs(stash.items) do
        local section = item_data.section

        roguelite_manager.debug_write("Creating item " .. section .. "...")

        local se_obj = alife_create(section, se_box.position, se_box.m_level_vertex_id, se_box.m_game_vertex_id, se_box.id, false)

        if se_obj then
            roguelite_manager.debug_write("Created item " .. se_obj:name())

            if IsWeapon(se_obj) then
                roguelite_manager.debug_write("Creating weapon data for " .. se_obj:name() .. " " ..se_obj.id .. ".")

                local data = utils_stpk.get_weapon_data(se_obj)

                data.ammo_current = item_data.ammo_current
                data.ammo_elapsed = item_data.ammo_elapsed
                data.weapon_state = item_data.weapon_state
                data.addon_flags = item_data.addon_flags
                data.ammo_type = item_data.ammo_type
                data.condition = item_data.condition
                data.upgrades = item_data.upgrades
                data.visual_name = item_data.visual_name
                data.visual_flags = item_data.visual_flags
                data.object_flags = item_data.object_flags
                data.custom_data = item_data.custom_data



                utils_stpk.set_weapon_data(data, se_obj)
            elseif IsAmmo(se_obj) then
                roguelite_manager.debug_write("Creating ammo data for " .. se_obj:name() .. " " .. se_obj.id .. ".")

                local data = utils_stpk.get_ammo_data(se_obj)

                data.condition = item_data.condition
                data.upgrades = item_data.upgrades
                data.visual_name = item_data.visual_name
                data.visual_flags = item_data.visual_flags
                data.object_flags = item_data.object_flags
                data.custom_data = item_data.custom_data
                data.ammo_left = item_data.ammo_left

                utils_stpk.set_ammo_data(data, se_obj)
            else
                roguelite_manager.debug_write("Creating item data " .. se_obj:name() .. " " .. se_obj.id ..".")

                local data = utils_stpk.get_item_data(se_obj)

                data.condition = item_data.condition
                data.upgrades = item_data.upgrades
                data.visual_name = item_data.visual_name
                data.visual_flags = item_data.visual_flags
                data.object_flags = item_data.object_flags
                data.custom_data = item_data.custom_data

                utils_stpk.set_item_data(data, se_obj)
            end

            alife():register(se_obj)

            if item_data.uses and item_data.uses ~= 0 then
                item_processor:Process_Item(nil, se_obj.id, {
                    uses = item_data.uses
                })
            end
        end
    end

    level.map_remove_object_spot(box:id(), "treasure")

    item_processor:update()
    m_data.stashes[box:id()] = nil
end

local function get_player_stashes()
    local stash_data = {}
    local sim = alife()

    roguelite_manager.debug_write("Searching for player stashes")

    -- First find all the stashes
    for i = 1, 65534 do
        local se_obj = sim:object(i)
        if se_obj and se_obj:section_name() == "inv_backpack" and se_obj.parent_id ~= AC_ID then
            roguelite_manager.debug_write("Found player stash " .. se_obj:name() .. " " .. se_obj.id .. ".")

            local txt = strformat(game.translate_string("st_itm_stash_of_character"), db.actor:character_name())
            local pos = se_obj.position

            stash_data[se_obj.id] = {
                id = se_obj.id,
                section = se_obj:section_name(),
                position = {
                    x = pos.x,
                    y = pos.y,
                    z = pos.z
                },
                level_vertex_id = se_obj.m_level_vertex_id,
                game_vertex_id = se_obj.m_game_vertex_id,
                txt = txt,
                items = {}
            }

            -- If the players stash was not yet opened, we need to save the data from the cache
            if m_data.stashes[se_obj.id] then
                roguelite_manager.debug_write("Stash not restored saving prior data.")
                stash_data[se_obj.id].items = m_data.stashes[se_obj.id].items
            end
        end
    end

    if not next(stash_data) then
        roguelite_manager.debug_write("No player stashes found.")
        return stash_data
    end

    roguelite_manager.debug_write("Searching for items in player stashes")
    -- Second iterate all items and find the ones with the parent_id of a found stash
 
    for i = 1, 65534 do
        local se_obj = sim:object(i)

        if se_obj then
            local stash = stash_data[se_obj.parent_id]

            if stash then
                roguelite_manager.debug_write("Found stash item " .. se_obj:name() .. " " .. se_obj.id ..".")

                local section = se_obj:section_name()
                local stash_item_data = {
                    id = se_obj.id,
                    name = se_obj:name(),
                    clsid = get_clsid(se_obj),
                    section = section
                }

                if IsWeapon(se_obj) then
                    roguelite_manager.debug_write("Gathering weapon data for " .. se_obj:name() .. " " ..se_obj.id .. ".")
                    local data = utils_stpk.get_weapon_data(se_obj)

                    stash_item_data.ammo_current = data.ammo_current
                    stash_item_data.ammo_elapsed = data.ammo_elapsed
                    stash_item_data.weapon_state = data.weapon_state
                    stash_item_data.addon_flags = data.addon_flags
                    stash_item_data.ammo_type = data.ammo_type

                    stash_item_data.condition = data.condition
                    stash_item_data.upgrades = data.upgrades

                    stash_item_data.visual_name = data.visual_name
                    stash_item_data.visual_flags = data.visual_flags

                    stash_item_data.object_flags = data.object_flags
                    stash_item_data.custom_data = data.custom_data
                elseif IsAmmo(se_obj) then
                    roguelite_manager.debug_write("Gathering ammo data for " .. se_obj:name() .. " " ..se_obj.id .. ".")
                    local data = utils_stpk.get_ammo_data(se_obj)

                    stash_item_data.condition = data.condition
                    stash_item_data.upgrades = data.upgrades

                    stash_item_data.visual_name = data.visual_name
                    stash_item_data.visual_flags = data.visual_flags

                    stash_item_data.object_flags = data.object_flags
                    stash_item_data.custom_data = data.custom_data

                    stash_item_data.ammo_left = data.ammo_left
                else
                    roguelite_manager.debug_write("Gathering item data " .. se_obj:name() .. " " ..se_obj.id .. ".")
                    local data = utils_stpk.get_item_data(se_obj)

                    stash_item_data.condition = data.condition
                    stash_item_data.upgrades = data.upgrades

                    stash_item_data.visual_name = data.visual_name
                    stash_item_data.visual_flags = data.visual_flags

                    stash_item_data.object_flags = data.object_flags
                    stash_item_data.custom_data = data.custom_data

                    if IsItem("multiuse", section) and m_data.item_uses_data[se_obj.id]then
                        stash_item_data.uses = m_data.item_uses_data[se_obj.id]
                    end
                end

                stash.items[se_obj.id] = stash_item_data
            end
        end
    end

    return stash_data
end

--------------------------------
-- Game Callbacks
--------------------------------
local function save_state(data)
    if not IsHardcoreMode() then
        return
    end

    roguelite_manager.debug_write("Saving stash data.")

    if not data.roguelite_manager then
        data.roguelite_manager = {}
    end

    data.roguelite_manager.stashes_version = m_data.stashes_version
    data.roguelite_manager.stashes = m_data.stashes
    data.roguelite_manager.item_uses_data = m_data.item_uses_data
end

local function load_state(data)
    if not IsHardcoreMode() then
        return
    end

    if not data.roguelite_manager then
        return
    end

    local stashes_version = data.roguelite_manager.stashes_version

    if stashes_version == 1 then
        if  data.roguelite_manager.stashes then
            roguelite_manager.debug_write("Restoring stash data from prior save.")
            m_data.stashes = data.roguelite_manager.stashes
        end
        if  data.roguelite_manager.stashes then
            roguelite_manager.debug_write("Restoring item use data from prior save.")
            m_data.item_uses_data = data.roguelite_manager.item_uses_data or m_data.item_uses_data
        end
    end

    data.roguelite_manager.stashes_version = nil
    data.roguelite_manager.stashes = nil
    data.roguelite_manager.item_uses_data = nil
end

local function physic_object_on_use_callback(box, who)
    if who then
        roguelite_manager.debug_write(who:name().." interacted with "..box:name())
    else
        roguelite_manager.debug_write(box:name().." was  interacted with.")
    end

    if not roguelite_manager.is_enabled() then
        roguelite_manager.debug_write("physic_object_on_use_callback roguelite disabled.")
        return
    end

    if not IsHardcoreMode() then
        roguelite_manager.debug_write("physic_object_on_use_callback not an ironman game mode.")
        return
    end

    if box:section() == "inv_backpack" then
        try_spawn_stash(box)
    end
end

local function actor_on_item_put_in_box(box, item)
    if not roguelite_manager.is_enabled() then
        roguelite_manager.debug_write("actor_on_item_put_in_box roguelite disabled.")
        return
    end

    if not IsHardcoreMode() then
        roguelite_manager.debug_write("actor_on_item_put_in_box not an ironman game mode.")
        return
    end

    if box:section() ~= "inv_backpack" then
        return
    end

    -- I couldn't find a way to get access to "uses" when only having
    -- access to server objects.   This is a hacky little work around.
    if IsItem("multiuse", item:section()) then
        local uses = utils_item.get_item_remaining_uses(item) or 0
        m_data.item_uses_data[item:id()] = uses
    end
end

function roguelite_load_state(save_data)
    if config.is_stash_restore_enabled then
        if save_data.stashes_version == 1 then
            restore_prior_state_stashes_v1(save_data)
        end
    end
end

function roguelite_save_state(save_data)
    save_data.stashes_version = m_data.stashes_version
    save_data.stashes = get_player_stashes()
end

function append_mcm_options(gr)
    roguelite_manager.debug_write("Appending stash module mcm options.")
    --Charater Reputation Settings
    table.insert(gr, { id = "line" , type = "line" })
    table.insert(gr, {
        id = "desc_mcm",
        type = "desc",
        text = "ui_mcm_roguelite_stashes_description",
        clr = {255, 255 ,255 ,0},
    })
    table.insert(gr, {
        id = "is_stash_restore_enabled",
        type = "check",
        val = 1,
        def = true
    })
    table.insert(gr, {
        id = "show_stashes_on_pda",
        type = "check",
        val = 1,
        def = true
    })
    table.insert(gr, {
        id = "stash_item_condition_loss_percent",
        type = "track",
        val = 2,
        min = 0,
        max = 1,
        step = 0.01,
        def = 0.01
    })
end

function on_option_change()
    local get_config = roguelite_manager_mcm.get_config

    config.is_stash_restore_enabled = get_config("is_stash_restore_enabled")
    config.show_stashes_on_pda = get_config("show_stashes_on_pda")
    config.stash_item_condition_loss_percent = get_config("stash_item_condition_loss_percent")

    roguelite_manager.debug_write("is_stash_restore_enabled = "..tostring(config.is_stash_restore_enabled))
    roguelite_manager.debug_write("show_stashes_on_pda = "..tostring(config.show_stashes_on_pda))
    roguelite_manager.debug_write("stash_item_condition_loss_percent = "..tostring(config.stash_item_condition_loss_percent))
end

function on_game_load()
    if ui_mcm then
	    on_option_change()
    end
end

function on_game_start()
	RegisterScriptCallback("on_game_load", on_game_load)
    RegisterScriptCallback("save_state", save_state)
    RegisterScriptCallback("load_state", load_state)
    RegisterScriptCallback("actor_on_item_put_in_box",actor_on_item_put_in_box)
    RegisterScriptCallback("physic_object_on_use_callback", physic_object_on_use_callback)

    roguelite_manager.debug_write("Stash module callbacks registered")
end

































